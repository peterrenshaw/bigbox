
        __     _         __                
       / /_   (_)____ _ / /_   ____   _  __
      / __ \ / // __ `// __ \ / __ \ | |/_/
     / /_/ // // /_/ // /_/ // /_/ /_>  <
    /_.___//_/ \__, //_.___/ \____//_/|_| [1]
              /____/                       


  name hack-bigbox-search.txt
  date 2013AUG18
  prog @peterrenshaw
  desc BIGBOX: A easy to use front end for socsim. This 
       hack, BIGBOX search allows for search within or 
	   external to you local system.


abstract

    A simple search form for N, where N is something to search. A seach
	could be externally for twitter ls
	or a search engine. Search could be
	offline and be something local. 	
	
why?

    Need a way to search external resources. This component will allow a
typical user to look for things inside the application. This has the
advantages of: 

* capturing information without having to hand edit
* allows software tools to process found information
* increasing work flow


What it is not

    For the moment search will be limited to external twitter and internal 
data in memory. At the moment this is not a generic plugable search engine
that allows the creation of plug-ins to search other external services. This
is howerver a future aim.


Explained quickly

    A big box that allows you to input text. A couple of simple options (
yet to be discovered, possibley OR) that are dependent on type of search 
being done.

User selects a search type (twitter or local), enters text into a box and 
results are returned. User selects interesting information and futher 
processes it. User can continue search or leave.


How this works

    AngularJS front end with a text entry box and big button to press. There
may/may not be other options to choose from but these are optional. If 
the user is online, the search option allows the user to search for items
and return results.

    The front end code calls the python back-end, endpoint for search,
something like, 

    GET item=foo

the front-end waits until the back-end returns a result. The result will be
a JSON object which will be something like

    item=foo
	results=[
	         {'title':'Foo fighers',
			  'description':'Foo fighters rock and so you should listen \
			                them... and play it loud',
			  'url':'http://foofighers.com/',
			  'status':200'},  
	         {'title':'this is a foo',
			  'description': 'long winded description of foo and why you \
			                 probably dont want to read it',
			  'url':'https://thisisafoo.com/'
			  'status':304},
			 {'title':'another foo',
			  'description':'Another Foo',
			  'url':'http://anotherfoo.co.uk',
			  'status':200},
	         ]

   which will be displayed in another box somewhere on the screen showing
something like this:


     TWITTER
     =================================  #-----#  
     #                               #  # BIG #  AND (0
     # foo OR fight                  #  # RED #  OR  (1)
     =================================  #-----#
	 
	 Found
	   TITLE         Status Description
	 * foo fighters  (200)  'foo figheters rock and so you should listen....'
	   ___________  	     
	 * this is foo   (304)  'long winded description of foo and why you.....'

	   ___________
	  
	 * another foo   (200)  'another foo'
	   ___________
	   	   
	   
The layout will change depending on the attributes of the seach captured and
processed at the backend. Options may/maynot be shown depending on the search
type selected.

Application
Requirements
Keywords
Usage
License

   Not decided but moving towards GPL 3. Have to consider any extra open source
code I use.


Resources

[1] Title created with an ASCII text generator using 'slant' and 'stretch=Yes".
The code is based on Figlet which can be found here ~ <http://www.figlet.org/>
[Last accessed: Sunday 4th August, 2013]
<http://www.network-science.de/ascii/>


# vim: ff=unix:ts=4:sw=4:tw=78:noai:expandtab


